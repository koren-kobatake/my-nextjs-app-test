＜ログイン＞
・認証機能は自前で作る
    https://ccccc/login?USERID=XXXXXXX&SESSIONKEY=XXXXXXXXX
・法人セッション有効期限の更新はAPI通信毎に実行する（APIをラップさせよう）
・認証後のセッション管理はライブラリに任せたい
・ユーザID暗号化する？（法人側：エンコード、決済側：デコード）
    →GETにしようと思ったけどやっぱやめ
    →POSTにすれば暗号化なんか考えなくてすむ

＜セッション管理＞
・候補（NextAuth.js、express-session、Iron Session）
・シンプルさと情報量の多さはNextAuth.js
・使い勝手も大事だから各々のライブラリを組み込んで試してみる
・どこまでできるかはある程度使ってみないと実際わからない
    例）認証なしだけどセッション管理だけしてくれる？有効期限の更新はプログラムで意識しなくてもちゃんとしてくれる？

＜ORM＞
・候補（Prisma、TypeORM、Sequelize）
・シンプルさと情報量の多さでPrisma
  ・マイグレーション機能はあるけど既に手動運用でDDL流してるし使わなそう
  ・基本はORMを使用
  ・トランザックション処理が必要なケースはネイティブクエリで対応する（ロックが必要なケースなど）
・実際に組み込んでみてPrismaはシンプルで使い勝手が良さそう

＜ロガー＞
・候補（Prisma、TypeORM、Sequelize）
・なんでもいいがシンプルさと情報量の多さでPino
  ・実際に組み込んでみてPrismaはシンプルで使い勝手が良さそう
  ・ログレベルは（INFO、WARNING、ERROR）くらいで良い
・実際に組み込んでみて普通に使える

＜ログ設計＞
・基本のログ出力はAPIの開始・終了・エラーハンドリングくらいでOK
・あとはノリ
・プレフィクスを決めるべき（時刻、API名、環境、クライアントIP、セッションIDなど）（法人を参考にすべき？）

＜メッセージ＞
・定数化（フロント、バックで共有できるのがNextのいいところかも、できるんだよね？）

＜APIインタフェース＞
・リクエスト
    良きに
・レスポンス
    ステータスコード（0:成功、1:失敗）とあとは良きに

＜フォーマッタ系＞
詳しくないから有識者に決めてもらう
・ESLint
・Prettir
  →住宅LSの踏襲でOK？

＜UT＞
詳しくないから有識者に決めてもらう
※UT投資はいつも初回の費用対効果に見合わないからとりあえずドロップ可対象機能でもいいかも（2回目リリース以降でものを言うやつだからそこに照準合わせるで良きかな、あとでダラダラと）
・フロントエンド
  →住宅LSの踏襲でOK？
・バックエンド
  →Jest×Testing Libraryの組み合わせ？
